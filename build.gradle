plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.7'
    id 'org.owasp.dependencycheck' version '8.4.3'
}

group = 'com.sgyj'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.security:spring-security-oauth2-client'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    
    // Swagger/OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    // https://mvnrepository.com/artifact/com.github.ulisesbocchio/jasypt-spring-boot-starter
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'com.h2database:h2'
    implementation 'p6spy:p6spy:3.9.1'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.opencsv:opencsv:5.7.1'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// JaCoCo 설정
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% 커버리지 요구
            }
        }
    }
}

// Checkstyle 설정
checkstyle {
    toolVersion = '10.12.4'
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
    maxWarnings = 0
}

// SpotBugs 설정
spotbugs {
    toolVersion = '4.7.3'
    effort = 'max'
    reportLevel = 'low'
    ignoreFailures = false
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

// OWASP Dependency Check 설정
dependencyCheck {
    format = 'ALL'
    suppressionFile = 'config/dependency-check/suppressions.xml'
    failBuildOnCVSS = 7
    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}

// 성능 테스트 설정
task performanceTest(type: Test) {
    group = 'verification'
    description = 'Runs performance tests'
    
    useJUnitPlatform()
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    
    include '**/*PerformanceTest.class'
    include '**/*Performance*.class'
    
    systemProperty 'spring.profiles.active', 'performance'
    
    reports {
        html.required = true
        junitXml.required = true
    }
    
    outputs.upToDateWhen { false }
}

// 전체 품질 검사 태스크
task qualityCheck {
    group = 'verification'
    description = 'Runs all quality checks'
    
    dependsOn checkstyleMain, checkstyleTest
    dependsOn spotbugsMain, spotbugsTest
    dependsOn dependencyCheckAnalyze
    dependsOn jacocoTestCoverageVerification
    dependsOn performanceTest
    
    doLast {
        println 'All quality checks completed successfully!'
    }
}

// 메인 클래스 지정
springBoot {
    mainClass = 'com.sgyj.popupmoah.PopupmoahApplication'
}
