package com.sgyj.popupmoah.security;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureWebMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureWebMvc
@ActiveProfiles("test")
class SecurityVulnerabilityTest {
    
    @Autowired
    private WebApplicationContext webApplicationContext;
    
    private MockMvc mockMvc;
    
    private void setupMockMvc() {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(webApplicationContext)
                .build();
    }
    
    @Test
    @DisplayName("XSS 공격 방어 테스트")
    void testXssProtection() throws Exception {
        setupMockMvc();
        
        // XSS 공격 시도
        String xssPayload = "<script>alert('XSS')</script>";
        
        mockMvc.perform(get("/api/popupstores/search")
                        .param("keyword", xssPayload))
                .andExpect(status().isOk())
                .andExpect(header().string("X-XSS-Protection", "1; mode=block"))
                .andExpect(header().string("X-Content-Type-Options", "nosniff"));
    }
    
    @Test
    @DisplayName("Clickjacking 방어 테스트")
    void testClickjackingProtection() throws Exception {
        setupMockMvc();
        
        mockMvc.perform(get("/api/popupstores/active"))
                .andExpect(status().isOk())
                .andExpect(header().string("X-Frame-Options", "DENY"));
    }
    
    @Test
    @DisplayName("MIME 타입 스니핑 방어 테스트")
    void testMimeTypeSniffingProtection() throws Exception {
        setupMockMvc();
        
        mockMvc.perform(get("/api/popupstores/active"))
                .andExpect(status().isOk())
                .andExpect(header().string("X-Content-Type-Options", "nosniff"));
    }
    
    @Test
    @DisplayName("Content Security Policy 적용 테스트")
    void testContentSecurityPolicy() throws Exception {
        setupMockMvc();
        
        mockMvc.perform(get("/api/popupstores/active"))
                .andExpect(status().isOk())
                .andExpect(header().exists("Content-Security-Policy"))
                .andExpect(header().string("Content-Security-Policy", 
                        org.hamcrest.Matchers.containsString("default-src 'self'")));
    }
    
    @Test
    @DisplayName("Referrer Policy 적용 테스트")
    void testReferrerPolicy() throws Exception {
        setupMockMvc();
        
        mockMvc.perform(get("/api/popupstores/active"))
                .andExpect(status().isOk())
                .andExpect(header().string("Referrer-Policy", "strict-origin-when-cross-origin"));
    }
    
    @Test
    @DisplayName("Permissions Policy 적용 테스트")
    void testPermissionsPolicy() throws Exception {
        setupMockMvc();
        
        mockMvc.perform(get("/api/popupstores/active"))
                .andExpect(status().isOk())
                .andExpect(header().exists("Permissions-Policy"))
                .andExpect(header().string("Permissions-Policy", 
                        org.hamcrest.Matchers.containsString("geolocation=()")));
    }
    
    @Test
    @DisplayName("서버 정보 노출 방지 테스트")
    void testServerInformationHiding() throws Exception {
        setupMockMvc();
        
        mockMvc.perform(get("/api/popupstores/active"))
                .andExpect(status().isOk())
                .andExpect(header().string("Server", ""))
                .andExpect(header().string("X-Powered-By", ""));
    }
    
    @Test
    @DisplayName("캐시 제어 테스트")
    void testCacheControl() throws Exception {
        setupMockMvc();
        
        mockMvc.perform(get("/api/popupstores/active"))
                .andExpect(status().isOk())
                .andExpect(header().string("Cache-Control", "no-cache, no-store, must-revalidate"))
                .andExpect(header().string("Pragma", "no-cache"))
                .andExpect(header().string("Expires", "0"));
    }
    
    @Test
    @DisplayName("SQL 인젝션 방어 테스트")
    void testSqlInjectionProtection() throws Exception {
        setupMockMvc();
        
        // SQL 인젝션 시도
        String sqlInjectionPayload = "'; DROP TABLE users; --";
        
        mockMvc.perform(get("/api/popupstores/search")
                        .param("keyword", sqlInjectionPayload))
                .andExpect(status().isOk()); // 에러가 발생하지 않아야 함
    }
    
    @Test
    @DisplayName("경로 탐색 공격 방어 테스트")
    void testPathTraversalProtection() throws Exception {
        setupMockMvc();
        
        // 경로 탐색 공격 시도
        String pathTraversalPayload = "../../../etc/passwd";
        
        mockMvc.perform(get("/api/popupstores/search")
                        .param("keyword", pathTraversalPayload))
                .andExpect(status().isOk()); // 에러가 발생하지 않아야 함
    }
}


