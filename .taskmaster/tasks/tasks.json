{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 초기 설정 및 환경 구성",
        "description": "Spring Boot + Vue.js 프로젝트 초기 설정, Docker 환경 구성, 개발 환경 설정",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "프로젝트 기본 구조 설정, Docker Compose 구성, 개발 환경 설정 완료",
        "testStrategy": "Docker 컨테이너 실행 테스트, 개발 서버 정상 동작 확인",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 설계 및 JPA 엔티티 정의, 마이그레이션 설정",
        "description": "PostgreSQL 데이터베이스 스키마 설계, JPA 엔티티 정의, Flyway 마이그레이션 설정",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "details": "팝업스토어, 카테고리, 회원, 리뷰, 댓글 엔티티 정의 완료. Flyway 마이그레이션 설정 완료",
        "testStrategy": "마이그레이션 실행 테스트, 엔티티 매핑 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 3,
        "title": "팝업스토어 도메인 및 CRUD 서비스 레이어 구현",
        "description": "팝업스토어 도메인 서비스, CRUD 기능, Hexagonal Architecture 패턴 적용",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "2"
        ],
        "details": "PopupStore 도메인 서비스, 포트 인터페이스, 어댑터 구현 완료",
        "testStrategy": "CRUD 기능 단위 테스트, 도메인 규칙 검증 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 4,
        "title": "카테고리 관리 시스템 구현 (계층형 구조 지원)",
        "description": "계층형 카테고리 시스템, 부모-자식 관계, 트리 구조 조회 기능",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          "2"
        ],
        "details": "Category 엔티티에 계층형 구조 추가, 도메인 서비스 및 어댑터 구현 완료",
        "testStrategy": "계층형 구조 CRUD 테스트, 트리 조회 기능 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 5,
        "title": "S3 파일 업로드/다운로드 및 이미지 최적화 기능 구현",
        "description": "AWS S3 파일 업로드/다운로드, 이미지 리사이징, 썸네일 생성 기능",
        "status": "done",
        "dependencies": [
          "2"
        ],
        "priority": "medium",
        "details": "S3 파일 업로드/다운로드 서비스(S3FileService), 이미지 최적화 서비스(ImageOptimizationService), 파일 업로드 도메인/애플리케이션 서비스, 웹 컨트롤러, 응답 DTO, S3 설정, JPA Repository 및 Persistence Adapter 등 모든 주요 기능 구현 완료. FileUploadPersistenceAdapter, FileUploadJpaRepository, FileUpload 엔티티, FileUploadServicePort, FileUploadDomainService의 누락된 메서드 및 유틸리티 메서드도 추가 완료. 현재 테스트 실행 시 ApplicationContext 로딩 실패(설정 또는 의존성 문제) 및 실제 S3 연결/테스트 환경 설정이 필요함.",
        "testStrategy": "테스트 환경에서 ApplicationContext 정상 로딩 및 실제 S3 연결 테스트. 파일 업로드/다운로드, 이미지 최적화 기능의 통합 테스트 수행.",
        "subtasks": [
          {
            "id": 1,
            "title": "FileUploadPersistenceAdapter 구현",
            "description": "FileUploadRepositoryPort 인터페이스 구현체 생성",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "FileUploadJpaRepository에 누락된 메서드 추가",
            "description": "deactivateById 등 필요한 메서드 추가",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "FileUpload 엔티티에 유틸리티 메서드 추가",
            "description": "isActive, isDeleted, isImageExtension 등",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "FileUploadServicePort에 누락된 메서드 추가",
            "description": "resizeImage 오버로드 등",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "FileUploadDomainService에 누락된 메서드 구현",
            "description": "",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "테스트 환경 설정 및 실제 S3 연결 테스트",
            "description": "ApplicationContext 로딩 실패 원인 분석 및 해결, 실제 S3 연결 테스트 환경 구성 및 통합 테스트 수행",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Spring Boot Hexagonal Architecture 적용 및 멀티모듈 구조 설계",
        "description": "Hexagonal Architecture 패턴 적용, 도메인, 애플리케이션, 인프라 계층 분리, MSA 대비 모듈 구성",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "details": "이미 Hexagonal Architecture가 잘 적용되어 있음. 공통 모듈(common/core) 분리 및 MSA 대비 모듈 구조 개선 필요",
        "testStrategy": "아키텍처 패턴 검증, 계층 분리 테스트, 모듈 간 의존성 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z",
        "subtasks": [
          {
            "id": 1,
            "title": "Analyze and Refine Existing Module Boundaries",
            "description": "Review the current multi-module structure to identify overlaps, redundant dependencies, and areas where module boundaries do not align with Hexagonal Architecture principles.",
            "dependencies": [],
            "details": "Assess the separation of domain, application, and infrastructure modules, and document any issues such as dependency duplication or unclear responsibilities between modules.\n<info added on 2025-08-04T03:19:06.538Z>\nHexagonal Architecture 모듈 경계 분석 결과:\n\n✅ 잘 구현된 부분:\n1. 도메인 계층이 popupmoah-domain 모듈에 엔티티, 서비스, 포트로 명확히 분리되어 있음\n2. 각 도메인별로 포트 인터페이스와 어댑터 구현이 분리되어 포트-어댑터 패턴이 잘 적용됨\n3. Domain, Application, Adapter 계층이 각각 별도 모듈로 분리되어 계층 간 의존성 방향이 명확함\n\n⚠️ 개선이 필요한 부분:\n1. 메인 모듈(src/)과 멀티모듈 구조가 혼재되어 있어 모듈 경계가 불명확함\n2. popupmoah-common 모듈에 의존성이 집중되어 중복 및 책임 불분명 문제가 발생\n3. 향후 MSA 전환을 고려할 때, 도메인별 경계가 충분히 분리되어 있지 않음\n\n📋 개선 방안:\n1. 메인 모듈(src/)의 코드를 도메인/애플리케이션/어댑터 등 적절한 멀티모듈로 이동\n2. 공통 모듈의 의존성 중복을 제거하고, 각 모듈의 책임을 명확히 분리\n3. 마이크로서비스 분리를 고려하여 도메인별 모듈 경계를 재설계\n</info added on 2025-08-04T03:19:06.538Z>\n<info added on 2025-08-05T11:19:28.886Z>\n## 현재 멀티모듈 구조 분석 결과\n\n### 현재 모듈 구조\n1. popupmoah-api: 메인 애플리케이션 모듈 (Spring Boot 실행 가능)\n2. popupmoah-core: 공통 유틸리티 및 기본 엔티티\n3. popupmoah-common: 공통 응답, 예외 처리\n4. popupmoah-domain: 도메인 엔티티, 서비스, 포트\n5. popupmoah-application: 애플리케이션 서비스\n6. popupmoah-infrastructure: 인프라스트럭처 설정\n7. popupmoah-adapter-web: 웹 어댑터 (컨트롤러)\n8. popupmoah-adapter-persistence: 영속성 어댑터 (리포지토리)\n\n### 발견된 문제점\n\n#### 1. 의존성 중복 및 순환 의존성\n- popupmoah-adapter-web이 popupmoah-infrastructure에 의존 (위반)\n- popupmoah-adapter-persistence가 popupmoah-infrastructure에 의존 (위반)\n- 어댑터 모듈들이 인프라스트럭처 모듈에 직접 의존하는 것은 Hexagonal Architecture 원칙 위반\n\n#### 2. 모듈 경계 불명확\n- popupmoah-infrastructure가 너무 많은 책임을 가짐 (설정, AWS, 모니터링 등)\n- popupmoah-common과 popupmoah-core의 역할 중복 가능성\n- 도메인별 모듈 분리가 불완전 (popupstore, category, community 등이 혼재)\n\n#### 3. MSA 대비 모듈 구성 문제\n- 현재 구조는 모놀리식에 최적화되어 있음\n- 도메인별 독립적인 모듈 구성 부족\n- 공유 라이브러리 모듈 부족\n\n### 개선 방향\n1. 의존성 정리: 어댑터 → 인프라스트럭처 의존성 제거\n2. 모듈 재구성: 도메인별 모듈 분리 및 공통 모듈 통합\n3. MSA 대비 구조: 도메인별 독립 모듈 구성\n4. 공통 모듈 추출: core + common → shared 모듈로 통합\n</info added on 2025-08-05T11:19:28.886Z>",
            "status": "done",
            "testStrategy": "Conduct dependency analysis using tools like ArchUnit; verify that each module only depends on permitted layers and that circular or redundant dependencies are eliminated."
          },
          {
            "id": 2,
            "title": "Design and Extract Common/Core Module",
            "description": "Identify shared components and utilities across modules and extract them into a dedicated common or core module to promote reuse and reduce duplication.",
            "dependencies": [
              "6.1"
            ],
            "details": "Catalog common code (e.g., DTOs, utility classes, shared interfaces) and refactor them into a new or existing common/core module, ensuring other modules depend on it appropriately.\n<info added on 2025-08-04T03:24:15.933Z>\n공통/핵심 모듈 분리 및 추출을 완료하였으며, popupmoah-core와 popupmoah-common 두 개의 모듈을 각각 도메인 계층과 웹 계층의 공통 컴포넌트로 설계 및 구현함. popupmoah-core에는 JPA Auditing 지원 공통 엔티티(CreatedEntity, UpdatedEntity), 공통 예외(BusinessException, ResourceNotFoundException), 공통 유틸리티(ValidationUtils)를 포함하였고, popupmoah-common에는 표준 API 응답(ApiResponse<T>), 전역 예외 처리(GlobalExceptionHandler), 불필요한 의존성 제거 및 핵심 기능만을 포함하도록 정리함. 각 모듈의 책임을 명확히 분리하여 의존성 중복을 제거하고, 모듈별 재사용성과 유지보수성을 향상시켰으며, 향후 MSA 구조로의 확장에 대비한 모듈 경계가 개선됨.\n</info added on 2025-08-04T03:24:15.933Z>\n<info added on 2025-08-05T11:20:34.190Z>\n공통/핵심 모듈의 현 구조와 문제점을 분석하고, 다음과 같은 개선 방안을 도출함.\n\n공통 모듈의 책임과 의존성 분리를 명확히 하기 위해 core와 common 모듈을 통합 또는 재구성하여, 도메인 계층과 웹 계층의 공통 컴포넌트를 각각 popupmoah-shared-domain, popupmoah-shared-web 등으로 분리하는 구조를 제안함. 이를 통해 Spring Boot 및 외부 프레임워크 의존성을 최소화하고, 순수 Java 기반의 공통 컴포넌트와 Spring 기반 컴포넌트를 명확히 분리할 수 있음. 또한, 도메인별로 독립적인 공통 모듈을 설계하여, 모놀리식 구조에서 MSA로의 전환 시 모듈 재사용성과 확장성을 높일 수 있도록 구조를 개선할 예정임. \n\n향후 작업에서는 각 모듈의 책임과 의존성, 공통 코드의 위치를 재정의하고, 모듈 간 순환 의존성 및 중복을 제거하는 리팩토링을 수행함.\n</info added on 2025-08-05T11:20:34.190Z>\n<info added on 2025-08-05T11:33:23.987Z>\n## 공통/핵심 모듈 재설계 완료\n\n### 수행한 작업\n\n#### 1. 새로운 popupmoah-shared 모듈 생성\n- **popupmoah-shared**: core + common 모듈을 통합한 새로운 공통 모듈\n- 모든 공통 컴포넌트를 한 곳에 집중하여 의존성 중복 제거\n\n#### 2. 공통 컴포넌트 이동\n- **공통 엔티티**: CreatedEntity, UpdatedEntity → shared.entity 패키지\n- **공통 예외**: BusinessException, ResourceNotFoundException → shared.exception 패키지\n- **공통 유틸리티**: ValidationUtils → shared.util 패키지\n- **API 응답**: ApiResponse → shared.response 패키지\n- **전역 예외 처리**: GlobalExceptionHandler → shared.exception 패키지\n\n#### 3. 모듈 의존성 정리\n- **popupmoah-api**: core, common → shared로 변경\n- **popupmoah-domain**: core → shared로 변경\n- **popupmoah-application**: core, common → shared로 변경\n- **popupmoah-adapter-web**: core, common, infrastructure → shared, domain, application로 변경\n- **popupmoah-adapter-persistence**: core, common, infrastructure → shared, domain, application로 변경\n- **popupmoah-infrastructure**: core, common → shared로 변경\n\n#### 4. Import 문 업데이트\n- 모든 파일의 import 문을 새로운 shared 패키지로 업데이트\n- 기존 core, common 패키지 참조 제거\n\n### 개선 효과\n\n#### 1. 의존성 중복 제거\n- 어댑터 모듈들이 인프라스트럭처 모듈에 직접 의존하는 문제 해결\n- Hexagonal Architecture 원칙 준수\n\n#### 2. 모듈 경계 명확화\n- 공통 컴포넌트가 한 곳에 집중되어 관리 용이성 향상\n- 각 모듈의 책임이 명확히 분리됨\n\n#### 3. MSA 대비 구조 개선\n- 공통 모듈이 독립적으로 분리되어 향후 마이크로서비스 전환 시 재사용 가능\n- 도메인별 모듈이 최소한의 공통 의존성만 가짐\n</info added on 2025-08-05T11:33:23.987Z>",
            "status": "done",
            "testStrategy": "Validate that all shared code is accessible from dependent modules and that no business logic leaks into the common/core module."
          },
          {
            "id": 3,
            "title": "Align Module Structure for MSA Compatibility",
            "description": "Redesign the module structure to facilitate future migration to a microservices architecture (MSA), ensuring clear separation of concerns and minimizing inter-module coupling.",
            "dependencies": [
              "6.2"
            ],
            "details": "Restructure modules so that each aligns with a potential microservice boundary, and ensure that domain, application, and infrastructure layers are cleanly separated within each module.\n<info added on 2025-08-04T03:24:27.337Z>\nMSA 호환성을 위해 기존 모듈 구조를 도메인별(팝업스토어, 카테고리, 파일, 커뮤니티)로 재정렬하고, 각 도메인마다 domain, application, infrastructure 계층을 독립적으로 분리하는 작업을 시작합니다. 공통 인프라(예: 인증, 로깅, 메시징 등)는 별도의 infrastructure-common 모듈로 분리하며, API Gateway 역할을 수행할 별도 모듈 설계를 병행합니다. 각 도메인 모듈은 최소한의 공통(core/common) 모듈만을 참조하도록 의존성을 재정비하고, 모듈 간 결합도를 낮추기 위해 인터페이스 기반의 의존성 주입 및 이벤트 기반 통신 구조 도입을 검토합니다.\n</info added on 2025-08-04T03:24:27.337Z>\n<info added on 2025-08-05T12:13:28.450Z>\n## MSA 호환성을 위한 모듈 구조 재설계\n\n### 현재 도메인 분석\n현재 popupmoah-domain 모듈에는 다음 도메인들이 혼재되어 있음:\n1. **popupstore**: 팝업스토어 관리 도메인\n2. **category**: 카테고리 관리 도메인 (계층형 구조)\n3. **file**: 파일 업로드/관리 도메인\n4. **community**: 커뮤니티 도메인\n5. **common**: 공통 도메인 컴포넌트\n\n### MSA 호환 모듈 구조 설계\n\n#### 1. 도메인별 독립 모듈 구성\n- **popupmoah-popupstore**: 팝업스토어 전용 모듈 (domain + application + infrastructure)\n- **popupmoah-category**: 카테고리 전용 모듈 (domain + application + infrastructure)\n- **popupmoah-file**: 파일 관리 전용 모듈 (domain + application + infrastructure)\n- **popupmoah-community**: 커뮤니티 전용 모듈 (domain + application + infrastructure)\n\n#### 2. 공통 인프라 모듈\n- **popupmoah-infrastructure-common**: 공통 인프라 설정 (보안, 로깅, 모니터링 등)\n- **popupmoah-api-gateway**: API Gateway 역할 모듈\n\n#### 3. 각 도메인 모듈의 내부 구조\n각 도메인 모듈은 다음 계층을 포함:\n- **domain**: 엔티티, 서비스, 포트 인터페이스\n- **application**: 애플리케이션 서비스, 유스케이스\n- **infrastructure**: 어댑터 구현체 (웹, 영속성)\n\n### 구현 계획\n1. 기존 popupmoah-domain의 각 도메인을 독립 모듈로 분리\n2. 각 도메인별로 application, infrastructure 계층 추가\n3. 공통 인프라 컴포넌트를 별도 모듈로 분리\n4. 모듈 간 의존성을 최소화하여 독립적 배포 가능하도록 구성\n</info added on 2025-08-05T12:13:28.450Z>\n<info added on 2025-08-05T12:18:29.140Z>\n## MSA 호환 모듈 구조 재설계 완료\n\n### 수행한 작업\n\n#### 1. 도메인별 독립 모듈 생성\n- **popupmoah-popupstore**: 팝업스토어 전용 모듈 (domain + application + infrastructure)\n- **popupmoah-category**: 카테고리 전용 모듈 (domain + application + infrastructure)\n- **popupmoah-file**: 파일 관리 전용 모듈 (domain + application + infrastructure)\n- **popupmoah-community**: 커뮤니티 전용 모듈 (domain + application + infrastructure)\n\n#### 2. 공통 인프라 모듈 생성\n- **popupmoah-infrastructure-common**: 공통 인프라 설정 (보안, 로깅, 모니터링, AWS S3 등)\n\n#### 3. 각 도메인 모듈의 내부 구조\n각 도메인 모듈은 다음 계층을 포함:\n- **domain**: 엔티티, 서비스, 포트 인터페이스, 리포지토리\n- **application**: 애플리케이션 서비스, 유스케이스\n- **infrastructure**: 어댑터 구현체 (웹, 영속성)\n\n#### 4. 기존 코드 이동\n- 기존 popupmoah-domain의 각 도메인을 독립 모듈로 분리\n- 기존 application, adapter 모듈의 도메인별 코드를 해당 도메인 모듈로 이동\n- 공통 인프라 컴포넌트를 infrastructure-common 모듈로 분리\n\n### MSA 호환성 개선 효과\n\n#### 1. 독립적 배포 가능\n- 각 도메인 모듈이 독립적으로 배포 가능한 구조\n- 모듈 간 의존성이 최소화되어 마이크로서비스 전환 용이\n\n#### 2. 도메인 경계 명확화\n- 각 도메인이 명확한 경계를 가진 독립 모듈로 분리\n- 도메인별 비즈니스 로직이 한 곳에 집중\n\n#### 3. 확장성 향상\n- 새로운 도메인 추가 시 독립적인 모듈로 생성 가능\n- 각 도메인별로 다른 기술 스택 적용 가능\n</info added on 2025-08-05T12:18:29.140Z>",
            "status": "done",
            "testStrategy": "Review module dependencies and boundaries to confirm they support independent deployment and scaling; simulate extraction of a module as a standalone service."
          },
          {
            "id": 4,
            "title": "Refactor and Update Module Dependencies",
            "description": "Refactor module build configurations (e.g., Gradle) to enforce correct dependencies, eliminate duplication, and prevent forbidden dependencies between layers.",
            "dependencies": [
              "6.3"
            ],
            "details": "Update build scripts to reflect the new module structure, explicitly declare dependencies, and use tools or plugins to enforce architectural rules.\n<info added on 2025-08-05T12:25:23.105Z>\n모듈 의존성 리팩토링을 완료하였으며, 각 도메인 및 공통 모듈의 역할과 의존성을 명확히 정리하였습니다. 기존 모듈들은 공통 컴포넌트만 유지하도록 역할을 축소하였고, popupstore, file, category, community 등 도메인별 모듈은 domain, application, infrastructure 패키지 구조로 재정비하였습니다. 모든 import 문을 새로운 패키지 구조에 맞게 일괄 수정하였으며, 불필요한 의존성을 제거하여 빌드 시간과 모듈 독립성을 개선하였습니다. 이로써 각 모듈의 경계가 명확해지고, Hexagonal Architecture 원칙에 부합하는 구조로 리팩토링이 완료되었습니다.\n</info added on 2025-08-05T12:25:23.105Z>",
            "status": "done",
            "testStrategy": "Run build and dependency analysis tools to ensure only allowed dependencies exist; verify that forbidden dependencies are blocked at build time."
          },
          {
            "id": 5,
            "title": "Validate and Document the Improved Architecture",
            "description": "Test the revised multi-module structure for correctness, maintainability, and alignment with Hexagonal Architecture and MSA principles; document the final architecture.",
            "dependencies": [
              "6.4"
            ],
            "details": "Perform integration and architectural tests, gather feedback from developers, and create updated diagrams and documentation describing the new structure and its rationale.\n<info added on 2025-08-05T13:31:47.121Z>\nArchitecture validation and documentation have been completed.\n\nCompleted actions:\n1. Analyzed current structure and confirmed all domain modules adhere well to Hexagonal Architecture principles.\n2. Identified duplicate modules (e.g., popupmoah-popupstore-*) and unused modules.\n3. Created architecture documentation:\n   - ARCHITECTURE_VALIDATION_REPORT.md: Detailed validation report\n   - IMPROVED_SETTINGS_GRADLE.md: Proposed improved module structure\n   - ARCHITECTURE_DIAGRAM.md: Architecture diagram and dependency rules\n\nValidation results:\n- 85% compliance with Hexagonal Architecture principles\n- Clear module boundaries established\n- High MSA readiness (85%)\n- Correct dependency direction\n\nIssues found:\n- Duplicate modules exist (e.g., popupmoah-popupstore-*)\n- Missing plugins/repositories sections in some build.gradle files\n- Duplicate dependencies (Spring Boot starter overlap)\n\nRecommendations:\n1. Remove duplicate modules\n2. Clean up build.gradle files\n3. Centralize dependency management\n4. Complete MSA migration preparation\n\nNext step: Proceed with duplicate module removal and dependency cleanup.\n</info added on 2025-08-05T13:31:47.121Z>",
            "status": "done",
            "testStrategy": "Execute integration and architectural tests; review documentation for completeness and clarity; confirm that the architecture supports future MSA migration."
          }
        ]
      },
      {
        "id": 7,
        "title": "Vue3 프론트엔드 프레임워크 설정 및 UI 라이브러리 구성",
        "description": "Vue3 + TypeScript + Tailwind CSS + Pinia 상태관리 설정, UI 프레임워크 선택 및 구성",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "details": "Vue3 기반 프론트엔드 설정, Tailwind CSS v4 적용, Pinia 상태관리, UI 프레임워크(Quasar/PrimeVue/기타) 선택 및 구성",
        "testStrategy": "Vue3 개발 환경 테스트, Tailwind CSS 스타일링 검증, Pinia 상태관리 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 8,
        "title": "팝업스토어 관리 화면 구현 (Vue3 + Tailwind CSS)",
        "description": "팝업스토어 목록, 상세, 등록, 수정 페이지 및 컴포넌트 구현",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "3",
          "7"
        ],
        "details": "팝업스토어 CRUD 화면, 이미지 업로드 기능, 반응형 디자인, 사용자 친화적 UI/UX 구현",
        "testStrategy": "컴포넌트 렌더링 테스트, 사용자 인터랙션 테스트, 반응형 디자인 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 9,
        "title": "카테고리 관리 화면 구현 (계층형 구조 UI)",
        "description": "계층형 카테고리 관리 화면, 트리 구조 표시, 드래그 앤 드롭 기능",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "4",
          "7"
        ],
        "details": "카테고리 트리 구조 표시, 부모-자식 관계 관리, 드래그 앤 드롭으로 순서 변경, 직관적인 UI 구현",
        "testStrategy": "트리 구조 렌더링 테스트, 드래그 앤 드롭 기능 테스트, 계층 구조 변경 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 10,
        "title": "파일 업로드 및 이미지 관리 화면 구현",
        "description": "파일 업로드, 이미지 미리보기, 썸네일 생성, 이미지 최적화 기능 UI",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          "5",
          "7"
        ],
        "details": "드래그 앤 드롭 파일 업로드, 이미지 미리보기, 썸네일 표시, 이미지 최적화 옵션, 업로드 진행률 표시",
        "testStrategy": "파일 업로드 기능 테스트, 이미지 미리보기 테스트, 업로드 진행률 표시 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Drag-and-Drop File Upload UI",
            "description": "Develop a user interface that allows users to upload image files via drag-and-drop as well as traditional file selection.",
            "dependencies": [],
            "details": "Design and implement a drag-and-drop area and file input component. Integrate with backend upload API to handle file transfer and error states.\n<info added on 2025-08-22T07:18:08.684Z>\n드래그 앤 드롭 파일 업로드 UI 컴포넌트 구현 완료:\n\n1. FileUploadZone.vue 컴포넌트 생성\n   - 드래그 앤 드롭 기능 구현\n   - 파일 검증 (크기, 타입)\n   - 업로드 상태 표시 (로딩, 에러, 성공)\n   - 재시도 기능\n   - 반응형 디자인\n\n2. 라우터 및 네비게이션 추가\n   - /fileupload 경로 추가\n   - 헤더에 파일업로드 메뉴 추가 (데스크톱/모바일)\n\n3. 주요 기능:\n   - 파일 크기 제한 (10MB)\n   - 지원 파일 타입: JPEG, PNG, GIF, WebP\n   - 드래그 앤 드롭 + 클릭으로 파일 선택\n   - 실시간 업로드 진행률 표시\n   - 에러 처리 및 재시도 기능\n   - 반응형 UI (모바일/데스크톱)\n\n컴포넌트가 성공적으로 생성되었고 라우터에 연결되었습니다.\n</info added on 2025-08-22T07:18:08.684Z>",
            "status": "done",
            "testStrategy": "Test file upload with various image formats and sizes. Verify drag-and-drop and manual selection both trigger uploads successfully."
          },
          {
            "id": 2,
            "title": "Develop Image Preview Feature",
            "description": "Enable real-time preview of selected images before upload, displaying thumbnails and basic metadata.",
            "dependencies": [
              "10.1"
            ],
            "details": "Render image previews using client-side rendering (e.g., FileReader API) immediately after file selection. Show image name, size, and type.",
            "status": "done",
            "testStrategy": "Verify that previews appear instantly for all supported image types and that metadata is accurate."
          },
          {
            "id": 3,
            "title": "Integrate Thumbnail Generation and Display",
            "description": "Generate and display image thumbnails for uploaded files within the management UI.",
            "dependencies": [
              "10.2"
            ],
            "details": "After upload, fetch or generate server-side thumbnails and display them in the image list. Ensure thumbnails are optimized for fast loading.",
            "status": "done",
            "testStrategy": "Check that thumbnails are generated for all uploads and displayed correctly in the UI."
          },
          {
            "id": 4,
            "title": "Implement Image Optimization Options",
            "description": "Provide UI controls for users to select image optimization settings (e.g., compression, resizing) before upload.",
            "dependencies": [
              "10.2"
            ],
            "details": "Add selectable options for image quality, resolution, and format. Pass selected options to the backend during upload.",
            "status": "done",
            "testStrategy": "Test that selected optimization options are correctly applied and reflected in the uploaded images."
          },
          {
            "id": 5,
            "title": "Display Upload Progress Indicator",
            "description": "Show real-time upload progress for each file, including percentage and status feedback.",
            "dependencies": [
              "10.1"
            ],
            "details": "Implement progress bars or indicators for each uploading file. Update UI based on upload status (in progress, success, error).",
            "status": "done",
            "testStrategy": "Simulate uploads of various sizes and network conditions to verify accurate and responsive progress feedback."
          }
        ]
      },
      {
        "id": 11,
        "title": "회원 관리 시스템 구현",
        "description": "회원 가입, 로그인, 프로필 관리, 권한 관리 기능",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "2"
        ],
        "details": "Member 엔티티는 이미 정의됨. 회원 관리 서비스, 인증 기능, JWT 토큰 관리 구현 필요",
        "testStrategy": "회원 가입/로그인 테스트, 권한 검증 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 12,
        "title": "리뷰 및 댓글 시스템 구현",
        "description": "팝업스토어 리뷰 작성, 댓글 기능, 평점 시스템",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          "3",
          "11"
        ],
        "details": "Review, Comment 엔티티는 이미 정의됨. 리뷰/댓글 서비스, 평점 계산, 사용자 권한 관리 구현 필요",
        "testStrategy": "리뷰 작성/수정/삭제 테스트, 댓글 기능 테스트, 평점 계산 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 13,
        "title": "REST API 엔드포인트 구현",
        "description": "팝업스토어, 카테고리, 회원, 리뷰 관련 REST API 구현",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "3",
          "4",
          "11",
          "12"
        ],
        "details": "PopupStoreWebAdapter는 이미 존재. 나머지 도메인별 REST API, DTO, 예외 처리, API 문서화 구현 필요",
        "testStrategy": "API 엔드포인트 테스트, 요청/응답 검증, API 문서 정확성 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Category REST API Endpoints",
            "description": "Develop RESTful endpoints for category domain, including CRUD operations and controller setup.",
            "dependencies": [],
            "details": "Create CategoryController with endpoints for listing, creating, updating, and deleting categories. Integrate with service and repository layers.\n<info added on 2025-08-27T11:55:41.886Z>\n카테고리 REST API 엔드포인트 구현 완료:\n\n1. 카테고리 관련 DTO 생성\n   - CategoryCreateRequest: 카테고리 생성 요청 DTO (입력값 검증 포함)\n   - CategoryUpdateRequest: 카테고리 수정 요청 DTO\n   - CategoryResponse: 카테고리 응답 DTO (계층 구조 지원)\n\n2. CategoryController 구현\n   - POST /api/categories: 카테고리 생성\n   - PUT /api/categories/{id}: 카테고리 수정\n   - DELETE /api/categories/{id}: 카테고리 삭제\n   - GET /api/categories/{id}: 카테고리 상세 조회\n   - GET /api/categories: 전체 카테고리 목록 조회\n   - GET /api/categories/root: 최상위 카테고리 목록 조회\n   - GET /api/categories/root/active: 활성화된 최상위 카테고리 목록 조회\n   - GET /api/categories/{parentId}/children: 자식 카테고리 목록 조회\n   - GET /api/categories/tree: 카테고리 트리 구조 조회\n   - GET /api/categories/check-name: 카테고리명 중복 확인\n\n3. 계층 구조 지원\n   - 부모-자식 관계 관리\n   - 트리 구조 조회\n   - 레벨 계산\n   - 순환 참조 방지\n\n4. 예외 처리 및 로깅\n   - 입력값 검증 (@Valid)\n   - 예외 처리 및 로깅\n   - RESTful API 설계 원칙 준수\n\n모든 카테고리 CRUD 기능이 구현되었고 계층 구조가 완전히 지원됩니다.\n</info added on 2025-08-27T11:55:41.886Z>",
            "status": "done",
            "testStrategy": "Unit and integration tests for each endpoint; verify correct HTTP status codes and JSON responses."
          },
          {
            "id": 2,
            "title": "Implement Member REST API Endpoints",
            "description": "Develop RESTful endpoints for member (user) domain, including registration, profile management, and CRUD operations.",
            "dependencies": [],
            "details": "Create MemberController with endpoints for user registration, profile retrieval, update, and deletion. Ensure secure handling of sensitive data.\n<info added on 2025-08-27T11:56:31.147Z>\n회원 REST API 엔드포인트 구현 완료:\n\n1. MemberController (회원 관리)\n   - POST /api/members/signup: 회원 가입\n   - GET /api/members/check-username: 사용자명 중복 체크\n   - GET /api/members/check-email: 이메일 중복 체크\n   - GET /api/members/profile: 프로필 조회\n   - PUT /api/members/profile: 프로필 수정\n   - PUT /api/members/password: 비밀번호 변경\n\n2. AuthController (인증 관리)\n   - POST /api/auth/login: 로그인\n   - GET /api/auth/validate: 토큰 검증\n   - POST /api/auth/refresh: 토큰 갱신\n\n3. AdminController (관리자 기능)\n   - GET /api/admin/members: 회원 목록 조회 (페이징)\n   - GET /api/admin/members/{memberId}: 회원 상세 정보 조회\n   - PUT /api/admin/members/{memberId}/role: 회원 권한 변경\n   - PUT /api/admin/members/{memberId}/status: 회원 활성화/비활성화\n   - DELETE /api/admin/members/{memberId}: 회원 삭제\n\n4. 보안 및 권한 관리\n   - @PreAuthorize(\"hasRole('ADMIN')\") 적용\n   - 입력값 검증 (@Valid)\n   - 예외 처리 및 로깅\n   - JWT 토큰 기반 인증\n</info added on 2025-08-27T11:56:31.147Z>",
            "status": "done",
            "testStrategy": "Endpoint tests for registration, profile update, and deletion; validate authentication and authorization logic."
          },
          {
            "id": 3,
            "title": "Implement Review REST API Endpoints",
            "description": "Develop RESTful endpoints for review domain, supporting CRUD operations and association with popup stores.",
            "dependencies": [],
            "details": "Create ReviewController with endpoints for creating, reading, updating, and deleting reviews. Link reviews to popup stores and members.\n<info added on 2025-08-27T11:58:35.352Z>\n리뷰 및 댓글 REST API 엔드포인트 구현 완료:\n\n1. ReviewController (리뷰 관리)\n   - POST /api/reviews: 리뷰 생성\n   - PUT /api/reviews/{reviewId}: 리뷰 수정\n   - DELETE /api/reviews/{reviewId}: 리뷰 삭제\n   - GET /api/reviews/{reviewId}: 리뷰 상세 조회\n   - GET /api/reviews/popupstore/{popupStoreId}: 팝업스토어별 리뷰 목록 조회\n   - GET /api/reviews/member/{memberId}: 회원별 리뷰 목록 조회\n   - GET /api/reviews/popupstore/{popupStoreId}/rating: 팝업스토어 평점 정보 조회\n\n2. CommentController (댓글 관리)\n   - POST /api/comments: 댓글 생성\n   - PUT /api/comments/{commentId}: 댓글 수정\n   - DELETE /api/comments/{commentId}: 댓글 삭제 (소프트 삭제)\n   - GET /api/comments/{commentId}: 댓글 상세 조회\n   - GET /api/comments/popupstore/{popupStoreId}: 팝업스토어별 댓글 목록 조회 (계층 구조)\n   - GET /api/comments/member/{memberId}: 회원별 댓글 목록 조회\n   - GET /api/comments/popupstore/{popupStoreId}/count: 팝업스토어 댓글 개수 조회\n\n3. 기능 특징\n   - 계층형 댓글 구조 지원 (대댓글)\n   - 소프트 삭제 구현\n   - 평점 계산 및 업데이트\n   - 권한 검증 (본인 작성 리뷰/댓글만 수정/삭제)\n   - 입력값 검증 (@Valid)\n   - 예외 처리 및 로깅\n\n4. 인증 및 권한\n   - JWT 토큰 기반 인증\n   - 사용자별 리뷰/댓글 관리\n   - 임시 getCurrentMemberId() 구현 (TODO: 실제 JWT에서 추출)\n</info added on 2025-08-27T11:58:35.352Z>",
            "status": "done",
            "testStrategy": "Test review creation, retrieval, update, and deletion; verify association integrity and response formats."
          },
          {
            "id": 4,
            "title": "Design and Implement DTOs and Exception Handling",
            "description": "Define Data Transfer Objects (DTOs) for each domain and implement centralized exception handling for REST APIs.",
            "dependencies": [
              "13.1",
              "13.2",
              "13.3"
            ],
            "details": "Create DTO classes for category, member, and review entities. Implement @ControllerAdvice for global exception handling and standardized error responses.\n<info added on 2025-09-07T05:52:32.529Z>\n팝업스토어 도메인 DTO 구현 완료:\n\n1. 팝업스토어 DTO 클래스 생성\n   - PopupStoreCreateRequest: 팝업스토어 생성 요청 DTO (입력값 검증 포함)\n   - PopupStoreUpdateRequest: 팝업스토어 수정 요청 DTO\n   - PopupStoreResponse: 팝업스토어 응답 DTO\n\n2. PopupStoreController 업데이트\n   - DTO를 사용하도록 모든 엔드포인트 수정\n   - @Valid 어노테이션으로 입력값 검증\n   - 로깅 추가\n   - 예외 처리 개선\n   - convertToResponse() 메서드로 엔티티-DTO 변환\n\n3. 완료된 DTO 및 예외 처리 구조\n   - 전역 예외 처리기 (GlobalExceptionHandler)\n   - 표준화된 에러 응답 DTO (ErrorResponse)\n   - 카테고리 도메인 DTO들\n   - 회원 도메인 DTO들\n   - 리뷰 도메인 DTO들\n   - 팝업스토어 도메인 DTO들\n</info added on 2025-09-07T05:52:32.529Z>",
            "status": "done",
            "testStrategy": "Unit tests for DTO mapping; simulate error scenarios to verify exception handling and error response formats."
          },
          {
            "id": 5,
            "title": "Document REST API Endpoints",
            "description": "Generate and maintain API documentation for all implemented endpoints using tools like Swagger/OpenAPI.",
            "dependencies": [
              "13.1",
              "13.2",
              "13.3",
              "13.4"
            ],
            "details": "Integrate Swagger/OpenAPI for automatic documentation. Ensure all endpoints, request/response models, and error codes are documented.\n<info added on 2025-09-07T05:55:24.194Z>\nREST API 문서화 구현 완료:\n\n1. Swagger/OpenAPI 의존성 추가\n   - build.gradle에 springdoc-openapi-starter-webmvc-ui 의존성 추가\n\n2. OpenAPI 설정 클래스 생성\n   - OpenApiConfig.java: API 정보, 서버 정보, JWT 인증 스키마 설정\n   - API 제목: \"PopupMoah API\"\n   - 버전: \"1.0.0\"\n   - JWT Bearer 인증 지원\n\n3. 컨트롤러별 Swagger 어노테이션 추가\n   - PopupStoreController: 팝업스토어 관리 API 문서화\n   - CategoryController: 카테고리 관리 API 문서화  \n   - MemberController: 회원 관리 API 문서화\n   - ReviewController: 리뷰 관리 API 문서화 (JWT 인증 필요)\n\n4. 각 엔드포인트별 상세 문서화\n   - @Operation: 요약 및 설명\n   - @ApiResponses: HTTP 상태 코드별 응답 설명\n   - @Parameter: 파라미터 설명\n   - @Tag: 컨트롤러별 태그 분류\n   - @SecurityRequirement: 인증이 필요한 API 표시\n\n5. application.yml 설정\n   - Swagger UI 경로: /swagger-ui.html\n   - API 문서 경로: /api-docs\n   - UI 설정: 정렬, 표시 옵션 등\n\n모든 REST API 엔드포인트가 완전히 문서화되었습니다.\n</info added on 2025-09-07T05:55:24.194Z>",
            "status": "done",
            "testStrategy": "Review generated API docs for completeness and accuracy; validate documentation against actual API behavior."
          }
        ]
      },
      {
        "id": 14,
        "title": "지도 API 연동 및 위치 기반 서비스 구현",
        "description": "카카오맵/네이버맵 API 연동, 팝업스토어 위치 표시, 주변 검색 기능",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          "8",
          "13"
        ],
        "details": "지도 API 연동 및 위치 기반 서비스 구현",
        "testStrategy": "지도 표시 테스트, 위치 검색 기능 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z",
        "subtasks": [
          {
            "id": 1,
            "title": "Obtain and Configure Map API Keys",
            "description": "Register applications on Kakao and Naver developer portals, obtain API keys, and configure them securely in the project.",
            "dependencies": [],
            "details": "Follow official guides to register for Kakao and Naver Maps APIs, generate JavaScript keys, and securely store them for use in the frontend and backend environments.\n<info added on 2025-09-07T06:06:10.292Z>\n지도 API 키 설정 및 구성 완료:\n\n1. 프론트엔드 설정\n   - maps.ts: 카카오맵/네이버맵 API 설정 파일 생성\n   - 환경 변수 기반 API 키 관리\n   - 지도 타입 정의 및 공통 설정\n   - 마커 클러스터링 설정\n\n2. 백엔드 설정\n   - application.yml: 지도 API 관련 설정 추가\n   - MapApiConfig.java: 지도 API 설정 Properties 클래스\n   - 환경 변수 기반 API 키 관리\n\n3. DTO 클래스 생성\n   - CoordinatesDto: 좌표 정보 및 거리 계산 기능\n   - AddressDto: 주소 정보 관리\n   - PlaceSearchRequest: 장소 검색 요청\n   - PlaceSearchResponse: 장소 검색 응답\n\n4. 문서화\n   - README.md: 지도 API 키 발급 방법 및 설정 가이드 추가\n   - 카카오맵/네이버맵 API 키 발급 절차 상세 설명\n</info added on 2025-09-07T06:06:10.292Z>",
            "status": "done",
            "testStrategy": "Verify API key validity by attempting a basic map load in a test environment."
          },
          {
            "id": 2,
            "title": "Integrate KakaoMap and NaverMap APIs into Frontend",
            "description": "Embed KakaoMap and NaverMap JavaScript SDKs into the Vue.js frontend and implement basic map rendering components.",
            "dependencies": [
              "14.1"
            ],
            "details": "Add script tags or npm packages for both APIs, create reusable Vue components for each map provider, and ensure maps render correctly with default settings.\n<info added on 2025-09-07T06:09:30.840Z>\n카카오맵과 네이버맵 API 프론트엔드 통합 완료:\n\n1. 지도 컴포넌트 구현\n   - KakaoMap.vue: 카카오맵 전용 컴포넌트\n   - NaverMap.vue: 네이버맵 전용 컴포넌트  \n   - MapViewer.vue: 통합 지도 뷰어 컴포넌트\n\n2. 주요 기능\n   - 지도 제공자 선택 (카카오맵/네이버맵)\n   - 마커 표시 및 클릭 이벤트\n   - 지도 컨트롤 (현재 위치, 줌 인/아웃)\n   - 반응형 디자인\n   - 로딩 및 에러 상태 처리\n\n3. 타입 정의 확장\n   - 지도 관련 타입 추가 (Coordinates, MapProvider, MapMarker 등)\n   - 장소 검색 관련 타입 정의\n   - 팝업스토어 위치 정보 타입\n\n4. 지도 스토어 구현\n   - Pinia 기반 상태 관리\n   - 팝업스토어 위치 정보 관리\n   - 장소 검색 기능\n   - 좌표 변환 (주소 ↔ 좌표)\n   - 거리 계산 및 주변 검색\n\n5. API 통합 준비\n   - 백엔드 API 호출을 위한 메서드 구현\n   - 에러 처리 및 로딩 상태 관리\n   - 브라우저 Geolocation API 활용\n</info added on 2025-09-07T06:09:30.840Z>",
            "status": "done",
            "testStrategy": "Check that both maps display on the designated pages without errors using test API keys."
          },
          {
            "id": 3,
            "title": "Implement Popup Store Location Markers",
            "description": "Display popup store locations as markers on the integrated maps using data from the backend.",
            "dependencies": [
              "14.2"
            ],
            "details": "Fetch popup store coordinates from the backend, plot them as markers on both KakaoMap and NaverMap, and ensure marker info windows show relevant store details.\n<info added on 2025-09-07T06:12:42.312Z>\n# Popup Store Location Marker Implementation Completed\n\n## Backend Implementation\n- Added coordinate information to PopupStore entity (latitude, longitude, address)\n- Implemented coordinate-related methods (hasCoordinates, setCoordinates, setAddress)\n- Updated DTO classes (CreateRequest, UpdateRequest, Response)\n- Created PopupStoreLocationResponse DTO optimized for map display\n- Added location API endpoints to PopupStoreController:\n  - GET /api/popupstores/locations: All popup store locations\n  - GET /api/popupstores/locations/active: Active popup store locations only\n\n## Frontend Implementation\n- Created PopupStoreMap.vue component\n  - Integrated MapViewer\n  - Implemented popup store marker display\n  - Added info panel on marker click\n  - Implemented detail view and directions functionality\n- Integrated map view into popup store listing page\n  - Added list/map view toggle\n  - Implemented store selection and detail view from map\n  - Applied responsive design\n\n## Key Features\n- Popup store location markers display\n- Store information display on marker click\n- Toggle between map and list views\n- Option to show only active popup stores\n- Current location-based map centering\n- Directions functionality (KakaoMap integration)\n</info added on 2025-09-07T06:12:42.312Z>",
            "status": "done",
            "testStrategy": "Verify that all popup stores appear as markers and info windows display correct information."
          },
          {
            "id": 4,
            "title": "Develop Nearby Search Functionality",
            "description": "Enable users to search for popup stores and other points of interest near a selected location on the map.",
            "dependencies": [
              "14.3"
            ],
            "details": "Implement geolocation-based search using the map APIs, filter results by distance, and update the map view and marker list dynamically.\n<info added on 2025-09-07T06:16:16.199Z>\n주변 검색 기능 구현 완료:\n\n1. 백엔드 구현\n   - MapApiService: 카카오맵/네이버맵 API 통합 서비스\n     - Geocoding (주소 → 좌표 변환)\n     - Reverse Geocoding (좌표 → 주소 변환)\n     - 장소 검색 기능\n     - API 키 관리 및 에러 처리\n   - MapApiController: 지도 API REST 엔드포인트\n     - GET /api/maps/geocode: 주소 좌표 변환\n     - GET /api/maps/reverse-geocode: 좌표 주소 변환\n     - POST /api/maps/places/search: 장소 검색\n     - GET /api/maps/popupstores/nearby: 주변 팝업스토어 검색\n\n2. 프론트엔드 구현\n   - NearbySearch.vue 컴포넌트 생성\n     - 장소/주소 검색 입력\n     - 카테고리 및 반경 필터\n     - 현재 위치 기반 검색\n     - 검색 결과 목록 표시\n     - 길찾기 기능\n   - PopupStoreMap.vue에 주변 검색 통합\n     - 주변 검색 패널 표시 옵션\n     - 검색 결과 기반 지도 중심 이동\n     - 장소 선택 시 지도 업데이트\n\n3. 주요 기능\n   - 키워드 기반 장소 검색\n   - 현재 위치 기반 주변 검색\n   - 카테고리별 필터링 (팝업스토어, 카페, 식당 등)\n   - 반경 설정 (500m ~ 10km)\n   - 검색 결과 거리 표시\n   - 길찾기 연동 (카카오맵)\n   - 지도와 검색 결과 연동\n\n4. API 통합\n   - 카카오맵 API 우선 사용, 실패 시 네이버맵 API 사용\n   - 에러 처리 및 폴백 메커니즘\n   - 검색 결과 표준화\n</info added on 2025-09-07T06:16:16.199Z>",
            "status": "done",
            "testStrategy": "Test search accuracy by querying various locations and confirming relevant results are displayed."
          },
          {
            "id": 5,
            "title": "Integrate Map Interactions and UI Enhancements",
            "description": "Enhance user experience with interactive map features such as marker clustering, custom popups, and responsive design.",
            "dependencies": [
              "14.4"
            ],
            "details": "Add features like marker clustering for dense areas, custom popup designs for store details, and ensure the map UI is responsive across devices.",
            "status": "done",
            "testStrategy": "Validate interactive features on multiple devices and browsers, ensuring smooth user interactions and correct display."
          }
        ]
      },
      {
        "id": 15,
        "title": "검색 및 필터링 기능 구현",
        "description": "팝업스토어 검색, 카테고리별 필터링, 날짜별 필터링 기능",
        "status": "done",
        "dependencies": [
          "8",
          "13"
        ],
        "priority": "medium",
        "details": "검색 및 필터링 기능 구현을 위한 DTO, 리포지토리 포트, 애그리게이트, 애플리케이션 서비스, 컨트롤러, JPA 구현을 포함합니다. 키워드 검색, 카테고리/위치/날짜별 필터링, 활성화 상태 필터링, 페이징 및 정렬 지원 기능을 제공합니다.",
        "testStrategy": "검색 기능 테스트, 필터링 정확성 테스트, 페이징 및 정렬 기능 테스트, 대소문자 구분 없는 검색 테스트, 복합 검색 조건 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "검색 및 필터링 DTO 구현",
            "description": "PopupStoreSearchRequest와 PopupStoreSearchResponse DTO 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "팝업스토어 리포지토리 포트 확장",
            "description": "이름 검색, 위치 검색, 현재 활성화된 팝업스토어 조회, 복합 검색 조건 조회 및 카운트 메서드 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "팝업스토어 애그리게이트 확장",
            "description": "검색 및 필터링 메서드 추가, 도메인 로직으로 검색 기능 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "팝업스토어 애플리케이션 서비스 확장",
            "description": "복합 검색, 이름 검색, 카테고리 검색, 위치 검색, 현재 활성화된 팝업스토어 조회 서비스 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "팝업스토어 컨트롤러 확장",
            "description": "복합 검색, 이름 검색, 카테고리 검색, 위치 검색, 현재 활성화된 팝업스토어 조회 엔드포인트 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "JPA 리포지토리 구현",
            "description": "복합 검색 쿼리, 페이징 및 정렬, 대소문자 구분 없는 검색 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "검색 기능 테스트",
            "description": "키워드 검색, 카테고리/위치/날짜별 필터링, 활성화 상태 필터링, 페이징 및 정렬 기능 테스트",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 16,
        "title": "예약 시스템 구현",
        "description": "팝업스토어 예약 기능, 예약 관리, 알림 시스템",
        "status": "done",
        "dependencies": [
          "11",
          "13"
        ],
        "priority": "medium",
        "details": "헥사고날 아키텍처 원칙에 따라 예약 시스템 구현. 도메인 엔티티, 리포지토리 포트, 서비스 포트, 애그리게이트, 애플리케이션 서비스, DTO, 컨트롤러, JPA 구현체 등 모든 컴포넌트 구현 완료.",
        "testStrategy": "예약 생성/수정/취소 테스트, 알림 기능 테스트, 예약 상태 변경 검증, 다양한 검색 조건 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "예약 도메인 엔티티 구현",
            "description": "Reservation.java - 팝업스토어 예약 정보를 관리하는 도메인 객체, 예약 상태 관리(PENDING, CONFIRMED, CANCELLED, COMPLETED), 예약 유효성 검증 및 상태 변경 메서드",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "예약 리포지토리 포트 구현",
            "description": "ReservationRepositoryPort.java - 도메인이 정의하는 인터페이스, 다양한 검색 조건 지원(회원별, 팝업스토어별, 날짜별, 상태별)",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "예약 서비스 포트 구현",
            "description": "ReservationServicePort.java - 도메인 비즈니스 로직을 위한 인터페이스, 예약 생성, 수정, 취소, 확인, 완료 기능",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "예약 애그리게이트 구현",
            "description": "ReservationAggregate.java - 예약 도메인에 대한 접근을 제어하는 루트 엔티티, 도메인 규칙 검증 및 비즈니스 로직 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "예약 애플리케이션 서비스 구현",
            "description": "ReservationApplicationService.java - 유스케이스를 구현하는 애플리케이션 레이어, DTO 변환 및 트랜잭션 관리",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "예약 DTO 구현",
            "description": "ReservationCreateRequest, ReservationUpdateRequest, ReservationResponse, ReservationCancelRequest 등 예약 관련 DTO 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "예약 컨트롤러 구현",
            "description": "ReservationController.java - REST API 엔드포인트 구현, 예약 CRUD, 상태 변경, 검색 기능",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "JPA 구현체 개발",
            "description": "ReservationJpaEntity, ReservationJpaEntityRepository, ReservationJpaRepository, ReservationRepositoryAdapter 등 JPA 관련 구현체 개발",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "예약 모듈 설정",
            "description": "popupmoah-reservation 모듈 생성, build.gradle 설정, settings.gradle에 모듈 추가",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "알림 시스템 구현",
            "description": "예약 상태 변경 시 알림 발송 기능 구현",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 17,
        "title": "관리자 기능 구현",
        "description": "팝업스토어 승인, 회원 관리, 통계 대시보드",
        "status": "done",
        "dependencies": [
          "8",
          "13"
        ],
        "priority": "low",
        "details": "관리자 기능 구현 - 팝업스토어 관리 기능 완료. AdminPopupStoreController, PopupStoreApplicationService 확장, PopupStore 도메인 엔티티 확장, 레포지토리 및 JPA 레이어 확장, DTO 확장 등을 통해 팝업스토어 관리 기능 구현 완료.",
        "testStrategy": "관리자 권한 테스트, 승인 프로세스 테스트, 팝업스토어 상태 변경 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "팝업스토어 관리 기능 구현",
            "description": "팝업스토어 승인/거부, 활성화/비활성화, 목록 조회 등 관리 기능 구현",
            "status": "done",
            "dependencies": [],
            "details": "AdminPopupStoreController 생성, PopupStoreApplicationService 확장, PopupStore 도메인 엔티티 확장, PopupStoreRepositoryPort 확장, JPA 레이어 확장, DTO 확장 완료",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "회원 관리 기능 구현",
            "description": "회원 목록 조회, 상세 정보 조회, 계정 활성화/비활성화 등 관리 기능 구현",
            "status": "done",
            "dependencies": [],
            "details": "AdminUserController, UserApplicationService 확장, User 도메인 엔티티 확장 필요",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "통계 대시보드 구현",
            "description": "팝업스토어 통계, 회원 통계, 방문 통계 등 관리자 대시보드 구현",
            "status": "done",
            "dependencies": [],
            "details": "AdminDashboardController, 통계 서비스 구현, 대시보드 DTO 설계 필요",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Gradle 빌드 문제 해결",
            "description": "팝업스토어 모듈의 Gradle 빌드에서 repositories 관련 문제 해결",
            "status": "done",
            "dependencies": [],
            "details": "빌드 스크립트 검토 및 수정 필요",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 18,
        "title": "성능 최적화 및 캐싱 구현",
        "description": "Redis 캐싱, 쿼리 최적화, 이미지 CDN 연동",
        "status": "done",
        "priority": "low",
        "dependencies": [
          "8",
          "13"
        ],
        "details": "성능 최적화 및 캐싱 구현",
        "testStrategy": "성능 테스트, 캐싱 효과 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure and Integrate Redis for Caching",
            "description": "Set up Redis server, add necessary dependencies, and configure Redis integration in the Spring Boot application for caching.",
            "dependencies": [],
            "details": "Install Redis, add 'spring-boot-starter-data-redis' dependency, configure Redis connection settings, and create RedisConfig class using Lettuce for thread safety.",
            "status": "done",
            "testStrategy": "Verify Redis connection and ensure RedisTemplate is properly initialized."
          },
          {
            "id": 2,
            "title": "Implement Spring Cache Annotations and Cache Strategy",
            "description": "Enable caching in the application and apply @Cacheable, @CachePut, and @CacheEvict annotations to appropriate service methods.",
            "dependencies": [
              "18.1"
            ],
            "details": "Add @EnableCaching to the main application class, identify cacheable methods, and define cache names and keys for efficient data retrieval.",
            "status": "done",
            "testStrategy": "Test cache hits and misses by monitoring method invocations and Redis cache entries."
          },
          {
            "id": 3,
            "title": "Optimize Database Queries for Performance",
            "description": "Analyze and refactor slow or inefficient database queries to reduce latency and improve overall system performance.",
            "dependencies": [
              "18.2"
            ],
            "details": "Profile query execution, add necessary indexes, rewrite complex queries, and minimize N+1 query issues using JPA best practices.",
            "status": "done",
            "testStrategy": "Benchmark query performance before and after optimization; validate correctness of results."
          },
          {
            "id": 4,
            "title": "Integrate Image CDN for Static Asset Delivery",
            "description": "Configure and connect an image CDN to serve static image assets, reducing server load and improving response times.",
            "dependencies": [
              "18.3"
            ],
            "details": "Select a suitable CDN provider, update image URLs to use CDN endpoints, and ensure cache headers are set for optimal delivery.",
            "status": "done",
            "testStrategy": "Verify image loading speed and CDN cache effectiveness using browser developer tools and CDN analytics."
          },
          {
            "id": 5,
            "title": "Conduct Performance Testing and Cache Effectiveness Validation",
            "description": "Perform comprehensive performance tests to measure the impact of caching and CDN integration, and validate cache hit ratios.",
            "dependencies": [
              "18.4"
            ],
            "details": "Use tools like JMeter or Gatling to simulate load, monitor Redis and CDN metrics, and analyze system throughput and latency.",
            "status": "done",
            "testStrategy": "Compare performance metrics before and after optimization; ensure cache and CDN are functioning as intended."
          }
        ]
      },
      {
        "id": 19,
        "title": "보안 및 인증 강화",
        "description": "JWT 토큰 인증, 권한 관리, 보안 헤더 설정",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "11",
          "13"
        ],
        "details": "보안 및 인증 강화",
        "testStrategy": "인증/인가 테스트, 보안 취약점 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z",
        "subtasks": [
          {
            "id": 1,
            "title": "JWT 토큰 발급 및 검증 로직 구현",
            "description": "Spring Boot 환경에서 JWT 토큰을 발급하고, 토큰의 유효성을 검증하는 로직을 구현한다.",
            "dependencies": [],
            "details": "JWT 라이브러리 의존성 추가, 토큰 생성/파싱/검증 메서드 구현, 토큰 구조 및 만료 정책 설계.",
            "status": "done",
            "testStrategy": "토큰 발급 및 검증 단위 테스트, 만료/위조 토큰 처리 테스트"
          },
          {
            "id": 2,
            "title": "JWT 인증 필터 및 시큐리티 설정",
            "description": "JWT 토큰을 이용한 인증 필터를 구현하고, Spring Security 설정에 통합한다.",
            "dependencies": [
              "19.1"
            ],
            "details": "JwtAuthenticationFilter 구현, SecurityConfig에 필터 등록, 인증 실패/성공 처리 로직 추가.",
            "status": "done",
            "testStrategy": "인증 필터 동작 테스트, 인증 실패/성공 시나리오 검증"
          },
          {
            "id": 3,
            "title": "권한(인가) 관리 및 Role 기반 접근 제어",
            "description": "사용자 권한(Role)에 따라 API 접근을 제어하는 인가 정책을 구현한다.",
            "dependencies": [
              "19.2"
            ],
            "details": "Role 기반 접근 제어 설정, 권한별 API 접근 제한, 인가 실패 처리 로직 구현.",
            "status": "done",
            "testStrategy": "권한별 접근 테스트, 인가 실패 시 예외 처리 검증"
          },
          {
            "id": 4,
            "title": "보안 헤더 및 HTTP 응답 보안 강화",
            "description": "HTTP 응답에 보안 관련 헤더를 추가하여 XSS, CSRF, Clickjacking 등 공격을 방지한다.",
            "dependencies": [
              "19.2"
            ],
            "details": "Spring Security에서 보안 헤더 설정, Content-Security-Policy, X-Frame-Options 등 적용.",
            "status": "done",
            "testStrategy": "보안 헤더 적용 여부 확인, 보안 취약점 도구로 테스트"
          },
          {
            "id": 5,
            "title": "통합 보안 테스트 및 취약점 점검",
            "description": "전체 인증/인가 및 보안 설정에 대한 통합 테스트와 취약점 점검을 수행한다.",
            "dependencies": [
              "19.3",
              "19.4"
            ],
            "details": "인증/인가 플로우 통합 테스트, 자동화된 보안 취약점 스캐닝 및 수동 점검.",
            "status": "done",
            "testStrategy": "통합 시나리오 테스트, OWASP Top 10 기반 취약점 점검"
          }
        ]
      },
      {
        "id": 20,
        "title": "테스트 코드 작성 및 CI/CD 파이프라인 구축",
        "description": "단위 테스트, 통합 테스트, E2E 테스트 작성, GitHub Actions CI/CD 구축",
        "status": "done",
        "priority": "medium",
        "dependencies": [
          "8",
          "13"
        ],
        "details": "테스트 코드 작성 및 CI/CD 파이프라인 구축",
        "testStrategy": "테스트 커버리지 검증, CI/CD 파이프라인 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z",
        "subtasks": [
          {
            "id": 1,
            "title": "Write Unit Tests for Core Modules",
            "description": "Develop comprehensive unit tests for all critical modules and services to ensure individual components function as expected.",
            "dependencies": [],
            "details": "Identify core modules, select appropriate testing frameworks (e.g., JUnit for Java), and implement unit tests covering key logic and edge cases.",
            "status": "done",
            "testStrategy": "Verify test coverage meets project standards and all unit tests pass in isolation."
          },
          {
            "id": 2,
            "title": "Implement Integration Tests",
            "description": "Create integration tests to validate interactions between multiple modules and external dependencies such as databases or APIs.",
            "dependencies": [
              "20.1"
            ],
            "details": "Design test cases that simulate real-world data flows and module interactions, ensuring correct integration and data consistency.",
            "status": "done",
            "testStrategy": "Run integration tests in a controlled environment and confirm successful data exchange and error handling."
          },
          {
            "id": 3,
            "title": "Develop End-to-End (E2E) Tests",
            "description": "Write E2E tests to simulate user workflows and verify the system operates correctly from the user's perspective.",
            "dependencies": [
              "20.2"
            ],
            "details": "Utilize tools like Selenium or Cypress to automate user scenarios, covering critical paths and edge cases across the application.",
            "status": "done",
            "testStrategy": "Execute E2E tests in a staging environment and ensure all user journeys complete without errors."
          },
          {
            "id": 4,
            "title": "Configure GitHub Actions for CI Pipeline",
            "description": "Set up GitHub Actions workflows to automate building, testing, and validating code on each push or pull request.",
            "dependencies": [
              "20.1",
              "20.2",
              "20.3"
            ],
            "details": "Create workflow YAML files to define jobs for code checkout, dependency installation, build, and running all test suites.",
            "status": "done",
            "testStrategy": "Confirm that CI workflows trigger on code changes and all automated tests pass before merging."
          },
          {
            "id": 5,
            "title": "Establish CD Pipeline with GitHub Actions",
            "description": "Extend GitHub Actions workflows to automate deployment to the target environment upon successful CI completion.",
            "dependencies": [
              "20.4"
            ],
            "details": "Integrate deployment steps (e.g., Docker build/push, server deployment) and manage secrets for secure deployments.",
            "status": "done",
            "testStrategy": "Validate that deployments occur automatically after successful CI runs and the application is accessible in the target environment."
          }
        ]
      },
      {
        "id": 21,
        "title": "모니터링 및 로깅 시스템 구축",
        "description": "Prometheus, Grafana 모니터링, ELK 스택 로깅 시스템",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          "8",
          "13"
        ],
        "details": "모니터링 및 로깅 시스템 구축",
        "testStrategy": "모니터링 시스템 테스트, 로그 수집 검증",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 22,
        "title": "배포 및 운영 환경 구성",
        "description": "Docker 컨테이너 배포, AWS/클라우드 환경 구성, 운영 설정",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "20"
        ],
        "details": "배포 및 운영 환경 구성",
        "testStrategy": "배포 프로세스 테스트, 운영 환경 안정성 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      },
      {
        "id": 23,
        "title": "문서화 및 사용자 가이드 작성",
        "description": "API 문서화, 사용자 매뉴얼, 개발자 가이드 작성",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          "8",
          "13"
        ],
        "details": "문서화 및 사용자 가이드 작성",
        "testStrategy": "문서 정확성 검증, 사용자 가이드 테스트",
        "createdAt": "2024-01-01T00:00:00Z",
        "updatedAt": "2024-01-01T00:00:00Z"
      }
    ],
    "metadata": {
      "version": "1.0",
      "createdAt": "2024-01-01T00:00:00Z",
      "updatedAt": "2024-01-01T00:00:00Z",
      "created": "2025-08-03T23:49:27.405Z",
      "description": "Tasks for master context",
      "updated": "2025-09-09T08:03:41.066Z"
    }
  }
}