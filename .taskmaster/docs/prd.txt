# 팝업모아 (PopupMoah) - Product Requirements Document

## Overview

팝업모아는 실시간으로 변화하는 팝업스토어, 샘플세일, 이벤트 정보를 한 곳에 모아 사용자에게 제공하는 플랫폼입니다. 

**해결하는 문제**: 
- 팝업스토어 정보가 여러 플랫폼에 분산되어 있어 찾기 어려움
- 팝업 정보가 실시간으로 업데이트되지 않아 놓치는 경우가 많음
- 오프라인 경험을 체계적으로 기록하고 공유할 수 있는 플랫폼 부재

**대상 사용자**: 
- 팝업스토어 탐방을 좋아하는 MZ세대
- 패션/라이프스타일 브랜드 팬
- 샘플세일이나 오프라인 이벤트를 놓치고 싶지 않은 소비자

**가치**: 
- 사용자: 효율적인 팝업 정보 관리 및 오프라인 경험 공유
- 브랜드: 자발적 후기 및 노출로 마케팅 효과 극대화
- 플랫폼: 커뮤니티를 통한 활성화 및 바이럴 유도

## Core Features

### 1. 실시간 팝업 정보 수집
- **기능**: 정각마다 자동 크롤링하여 새로운 팝업, 샘플세일, 이벤트 정보를 수집
- **중요성**: 최신 정보 제공으로 사용자 신뢰도 확보
- **동작 방식**: Spring Scheduler + WebClient/Jsoup을 활용한 웹 크롤링

### 2. 지도 기반 탐색
- **기능**: 지도에서 현재 또는 특정 날짜의 팝업 정보를 시각화
- **중요성**: 직관적인 위치 기반 검색으로 사용자 편의성 증대
- **동작 방식**: 카카오맵/네이버맵 API 연동, 마커 클릭 시 상세 정보 표시

### 3. 스마트 필터링 및 검색
- **기능**: 날짜별, 브랜드별, 지역별, 예약 여부, 카테고리별 필터링
- **중요성**: 개인화된 검색으로 원하는 팝업을 빠르게 찾을 수 있음
- **동작 방식**: JPA Specification을 활용한 동적 쿼리 생성

### 4. 예약 기능 연동
- **기능**: 예약 가능한 경우 외부 예약 사이트로 연결, 불가 시 대체 링크 제공
- **중요성**: 사용자의 구매 전환율 향상 및 브랜드와의 연결
- **동작 방식**: 외부 API 연동 및 링크 관리 시스템

### 5. 개인화된 방문 기록
- **기능**: 사용자 전용 '팝업 방문 기록 페이지' 생성 및 공유 링크 제공
- **중요성**: 개인화된 경험으로 사용자 만족도 및 재방문율 증대
- **동작 방식**: 사용자별 방문 기록 엔티티 및 공유 링크 생성 시스템

### 6. 커뮤니티 및 후기
- **기능**: 팝업별 댓글, 후기, 사진 업로드, 별점 평가
- **중요성**: 사용자 간 소통으로 플랫폼 활성화 및 바이럴 효과
- **동작 방식**: 댓글/리뷰 시스템, 이미지 업로드 (S3), 이벤트 기반 처리

## User Experience

### 사용자 페르소나
1. **팝업러버 김민수 (25세)**: 매주 새로운 팝업을 찾아다니는 패션 애호가
2. **브랜드팬 이지은 (28세)**: 특정 브랜드의 팝업을 놓치지 않으려는 브랜드 팬
3. **이벤트헌터 박준호 (30세)**: 샘플세일과 이벤트 정보를 수집하는 알뜰한 소비자

### 핵심 사용자 플로우
1. **팝업 발견**: 홈 화면 → 지도 탐색 → 필터링 → 상세 정보 확인
2. **방문 계획**: 예약 링크 클릭 → 방문 기록 생성 → 공유 링크 생성
3. **경험 공유**: 방문 후 사진 업로드 → 후기 작성 → 커뮤니티 참여

### UI/UX 고려사항
- **모바일 퍼스트**: 대부분의 사용자가 모바일로 접근
- **직관적 네비게이션**: 지도 기반 탐색으로 쉬운 위치 파악
- **실시간 업데이트**: 새로운 팝업 정보 실시간 알림
- **개인화**: 사용자 취향 기반 추천 및 맞춤 필터

## Technical Architecture

### 시스템 컴포넌트
- **Backend**: Spring Boot 3.x + Java 17
- **Database**: PostgreSQL (JPA/Hibernate)
- **File Storage**: AWS S3
- **Authentication**: JWT 기반 인증
- **External APIs**: 카카오맵/네이버맵 API, 크롤링 대상 사이트
- **Infrastructure**: Docker Compose, Gradle

### 데이터 모델
- **PopupStore**: 팝업스토어 기본 정보
- **PopupStoreImage**: 팝업스토어 이미지
- **Category**: 카테고리 분류
- **Member**: 사용자 정보
- **Review**: 리뷰 및 후기
- **Comment**: 댓글
- **VisitRecord**: 방문 기록
- **CrawlingLog**: 크롤링 로그

### API 및 통합
- **RESTful API**: 팝업스토어 CRUD, 커뮤니티 기능
- **지도 API**: 카카오맵/네이버맵 연동
- **크롤링 시스템**: Spring Scheduler + WebClient
- **파일 업로드**: S3 연동
- **인증**: JWT 토큰 기반

### 인프라 요구사항
- **서버**: Spring Boot 애플리케이션 서버
- **데이터베이스**: PostgreSQL
- **캐시**: Redis (선택사항)
- **스토리지**: AWS S3
- **모니터링**: Prometheus + Grafana

## Development Roadmap

### Phase 1: MVP (기본 기능)
- 팝업스토어 기본 CRUD ✅
- 사용자 인증 시스템 ✅
- 커뮤니티 기능 (댓글, 리뷰) ✅
- 카테고리 관리 ✅
- 이미지 업로드 (S3) ✅

### Phase 2: 핵심 기능 구현
- 자동 크롤링 시스템
- 지도 API 연동
- 고급 필터링 및 검색
- 예약 기능 연동

### Phase 3: 개인화 및 고도화
- 사용자 방문 기록 관리
- 맞춤 링크 생성 및 공유
- 개인화 추천 시스템
- 실시간 알림 기능

### Phase 4: 확장 및 최적화
- 성능 최적화 (캐싱, 인덱싱)
- 모니터링 및 로깅 강화
- 보안 강화
- API 문서화

## Logical Dependency Chain

### Foundation Layer (1순위)
1. **데이터 수집 기반**: 크롤링 시스템 → 지도 API 연동
2. **사용자 경험 기반**: 필터링/검색 → 예약 연동

### Enhancement Layer (2순위)
3. **개인화 기능**: 방문 기록 → 맞춤 링크 생성
4. **커뮤니티 활성화**: 후기 시스템 → 실시간 알림

### Optimization Layer (3순위)
5. **성능 최적화**: 캐싱 → 인덱싱 → 모니터링
6. **보안 강화**: API 보안 → 데이터 보호

### 사용 가능한 프론트엔드 우선순위
1. **지도 기반 탐색**: 가장 직관적이고 가시적인 기능
2. **필터링 시스템**: 사용자 경험 향상
3. **상세 정보 표시**: 마커 클릭 시 정보 제공

## Risks and Mitigations

### 기술적 도전과제
- **크롤링 안정성**: 
  - 위험: 대상 사이트 구조 변경 시 크롤링 실패
  - 완화: 다중 크롤링 전략, 에러 핸들링 강화
- **지도 API 제한**: 
  - 위험: API 호출 제한 및 비용
  - 완화: 캐싱 전략, 효율적인 API 사용
- **성능 이슈**: 
  - 위험: 대용량 데이터 처리 시 성능 저하
  - 완화: 인덱싱, 페이징, 캐싱 적용

### MVP 범위 설정
- **핵심 기능 우선**: 크롤링 → 지도 → 필터링 순서로 구현
- **점진적 개선**: 기본 기능 완성 후 고도화 기능 추가
- **사용자 피드백**: 각 단계별 사용자 테스트 및 피드백 반영

### 리소스 제약
- **개발 인력**: 
  - 위험: 복잡한 기능 구현에 시간 소요
  - 완화: 우선순위 기반 단계적 개발
- **인프라 비용**: 
  - 위험: S3, 지도 API 등 외부 서비스 비용
  - 완화: 효율적인 리소스 사용 및 캐싱 전략

## Appendix

### 기술 스택 상세
- **Backend**: Spring Boot 3.2+, Spring Security, Spring Data JPA
- **Database**: PostgreSQL 15+
- **Build Tool**: Gradle 8+
- **Container**: Docker, Docker Compose
- **Monitoring**: Prometheus, Grafana

### API 설계 원칙
- RESTful API 설계
- JWT 기반 인증
- 표준 HTTP 상태 코드 사용
- 일관된 응답 형식 (ApiResponse 래퍼)

### 보안 고려사항
- JWT 토큰 기반 인증
- CORS 설정
- SQL Injection 방지 (JPA 사용)
- XSS 방지 (입력 검증)
- 파일 업로드 보안 (S3 사용)

### 성능 최적화 전략
- 데이터베이스 인덱싱
- API 응답 캐싱
- 이미지 최적화 (S3)
- 페이징 처리
- 비동기 처리 (크롤링)