# Logstash 설정 파일
# 팝업모아 애플리케이션 로그 처리 및 변환

input {
  # Filebeat에서 로그 수신
  beats {
    port => 5044
    host => "0.0.0.0"
  }
  
  # 직접 파일 입력 (대안)
  file {
    path => "/var/log/popupmoah/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => multiline {
      pattern => "^\d{4}-\d{2}-\d{2}"
      negate => true
      what => "previous"
    }
  }
}

# 로그 필터링 및 파싱
filter {
  # JSON 로그 파싱
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      target => "parsed"
    }
  }
  
  # Spring Boot 로그 파싱
  if [message] =~ /^\d{4}-\d{2}-\d{2}/ {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{NUMBER:pid} --- \[%{DATA:thread}\] %{DATA:logger} : %{GREEDYDATA:log_message}"
      }
    }
  }
  
  # HTTP 요청 로그 파싱
  if [message] =~ /HTTP/ {
    grok {
      match => { 
        "message" => "%{IPORHOST:client_ip} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{URIPATH:path}(?:%{URIPARAM:params})? %{DATA:http_version}\" %{NUMBER:status_code} %{NUMBER:response_size} \"%{DATA:referer}\" \"%{DATA:user_agent}\" %{NUMBER:response_time}"
      }
    }
  }
  
  # 날짜 파싱
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS" ]
    target => "@timestamp"
  }
  
  # 사용자 정보 추출
  if [parsed][user_id] {
    mutate {
      add_field => { "user_id" => "%{[parsed][user_id]}" }
    }
  }
  
  # 요청 ID 추출
  if [parsed][request_id] {
    mutate {
      add_field => { "request_id" => "%{[parsed][request_id]}" }
    }
  }
  
  # 에러 로그 분류
  if [level] == "ERROR" {
    mutate {
      add_tag => [ "error" ]
    }
  }
  
  # 보안 관련 로그 분류
  if [message] =~ /(SECURITY|AUTH|LOGIN|PERMISSION)/ {
    mutate {
      add_tag => [ "security" ]
    }
  }
  
  # 성능 관련 로그 분류
  if [message] =~ /(PERFORMANCE|SLOW|TIMEOUT)/ {
    mutate {
      add_tag => [ "performance" ]
    }
  }
  
  # 민감한 정보 마스킹
  mutate {
    gsub => [
      "message", "password=[^\\s]*", "password=***",
      "message", "token=[^\\s]*", "token=***",
      "message", "email=[^\\s]*", "email=***"
    ]
  }
  
  # 지오로케이션 정보 추가
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
}

# 출력 설정
output {
  # Elasticsearch 출력
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "popupmoah-logs-%{+YYYY.MM.dd}"
    template_name => "popupmoah-logs"
    template_pattern => "popupmoah-logs-*"
    template => {
      "index_patterns" => ["popupmoah-logs-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 1
        "index.refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "message" => { "type" => "text" }
          "service" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "user_id" => { "type" => "keyword" }
          "request_id" => { "type" => "keyword" }
          "client_ip" => { "type" => "ip" }
          "geoip" => {
            "properties" => {
              "country_name" => { "type" => "keyword" }
              "city_name" => { "type" => "keyword" }
              "latitude" => { "type" => "float" }
              "longitude" => { "type" => "float" }
            }
          }
        }
      }
    }
  }
  
  # 에러 로그 별도 인덱스
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "popupmoah-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # 보안 로그 별도 인덱스
  if "security" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "popupmoah-security-%{+YYYY.MM.dd}"
    }
  }
  
  # 콘솔 출력 (개발용)
  # stdout {
  #   codec => rubydebug
  # }
}